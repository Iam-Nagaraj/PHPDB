pipeline {
    agent any
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: '61c758e2-9104-4d96-a534-08ba44934a2e', url: 'https://github.com/Iam-Nagaraj/PHPDB.git'
            }
        }
        stage('Compile') {
            steps {
                sh 'mvn clean compile'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withEnv(["SONAR_SCANNER_OPTS=-Xmx1024m -Xms512m"]) {
                    sh '''
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectKey=php \
                        -Dsonar.projectName=php \
                        -Dsonar.host.url=http://192.168.126.141:9000/ \
                        -Dsonar.login=squ_22cb6b4984fb0d81677c965958d56f2cd9451159 \
                        -X
                    '''
                }
            }
        }
        stage('Owasp Dependency Check') {
            steps {
                dependencyCheck additionalArguments: ' --scan ./ ', odcInstallation: 'DP'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('Build Artifact') {
            steps {
                sh "mvn clean install"
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: '61c758e2-9104-4d96-a534-08ba44934a2e', toolName: 'docker') {
                        sh "docker build -t vnraj685093/php ."
                        sh "docker push vnraj685093/php:latest"
                    }
                }
            }
        }
        stage('Run Docker Compose') {
            steps {
                sh 'docker-compose up -d'
            }
        }
    }
}
        stage('Deploy to Nginx') {
            steps {
                script {
                    // Stop and remove existing container if it exists
                    sh 'docker stop nginx-container || true'
                    sh 'docker rm nginx-container || true'
                    // Run the new container with your updated image
                    sh 'docker run -d -p 8085:85 --name nginx-container vnraj685093/php:latest'
                }
            }
        }
    }
    post {
        always {
            script {
                sh "trivy image vnraj685093/php:latest"
            }
        }
    }
}
